<iox_programs>

- IoX Programs work unlike other programming languages but there are many similarities.
- All programs have an 'If' section containing the conditions that evaluate true or false, and, in many cases cause the program to run
- All programs have a 'Then' section containing a series of actions to run if the programs is triggered to run, and, the If expression (made up of conditions) evaluates true
- All programs have a 'Else' section that always remains empty.  It is there for completeness
- A program has exactly one 'If' one 'Then' and one 'Else'
- 'If', 'Then', 'Else' can never be nested, instead, use multiple programs.

our backend takes this XML and puts in in files and uses a capitalized 4 digit hex number as the name with .PGM as the extension .. what are the filenames for the XML you just created

== Program level Comment ==
- A <comment> tag can appear after the else section of the program, all newlines and spacing are preserved

== Conditions ==
- There are several types of conditions, each beginning with a different xml tag
- Schedule conditions begin with <schedule> and there are several variations of <schedule> conditions
- The <and /> or <or /> operator is ignored for the first condition in the program and the first condition after an open <paren> because logically they have no meaning in those locations (just there for help in UI and consistency).
- Very Important! ALL conditions in a program MUST BE PREFIXED with either an <and /> or <or /> operator. This rule applies regardless of whether the condition is the first in the program, within parentheses (<paren>), or elsewhere.
- It is often better to create multiple small programs than to try to put everything in one program
- The 'If' section, which is an expression, contains zero or more conditions
- If the 'If' section is empty then the 'If' expression is evaluated as True
- Conditions only appear in the 'If' section

- Comment <comment> tag
- A comment in the 'If' section of the program using the <comment> tag with newlines and spacing preserved

  <comment>Hello!
This is a comment in conditions</comment>

Displays:

        // Hello!
        // This is a comment in conditions

== Parentheses
- The <paren> tag can be used for adding parentheses around conditions to make more complex expressions.
- A <paren> tag is always prefixed with an <and /> or <or /> operator.
- The expression is always either <and /><paren> <!- ... conditions ... --> </paren>, or, <or /> <!- ... conditions ... --> </paren>

== Linear processing of conditions, <paren>, <and />, <or /> operators

- The <and /> or <or /> operator is ignored for the first condition in the program and the first condition after an open <paren> because it makes no sense for them to be there logically (they are there strictly for UI purposes).
- Its obvious why the <and /> or <or /> is ignored for the first condition in the program because there is nothing to <and /> or <or /> it with
- Its obvious why the <and /> or <or /> is ignored for the first condition after a <paren> because there is nothing to <and /> or <or /> it with
- <and /> or <or /> always and only use self-closing tags.
- In the following examples, I'm using condition_X to represent a real condition
- The examples emphasize the inline processing of <and /> or <or />
1) Example
     <and /> condition_1
  means:
     condition1

2) Example
     <and /> condition_1 <or /> condition_2
  means:
     condition_1 OR condition_2

2) Example
     <paren><and />condition_1 <and /> condition_2</paren><or />condition_3
  means:
     ( condition1 AND condition2 ) OR condition3

1) Common things in Schedule conditions
   A) Just as training notation for FRED, we will call the following @TYPE_TIME
     - The <time> tag always contains the number of seconds since midnight
     - The <sunrise> tag always contains the number of seconds before sunrise (if negative) or number of seconds after sunrise (if positive)
     - The <sunset> tag always contains the number of seconds before sunset (if negative) or number of seconds after sunset (if positive)
     - Wherever @TYPE_TIME is mentioned it means exactly one of <time>, <sunrise>, or <sunset> may be used

   B) Just as training notation for FRED, We will call any of the following @TYPE_DATE
     - The <date> tag always contains a date in YYYY/MM/DD format

2) Schedule condition type 'at':
  - @AT_TIME is of type @TYPE_TIME
  - @AT_DATE is of type @TYPE_DATE
  - XML:
            <schedule>
                <at>
                    <time>@AT_TIME</time>
                    <date>@AT_DATE</date>
                </at>
            </schedule>

- Example full program XML:
<d2d>
    <trigger>
        <id>3</id>
        <name>New Program</name>
        <parent>1</parent>
        <if>
            <and/>
            <schedule>
                <at>
                    <time>56100</time>
                    <date>2025/02/13</date>
                </at>
            </schedule>
        </if>
        <then/>
        <else/>
        <comment/>
    </trigger>
</d2d>

- Example Human Readable listing of the full program:
New Program - [ID 0003][Parent 0001]

If
        Time is  3:35:00PM on 2025/02/13

Then
   - No Actions - (To add one, press 'Action')

Else
   - No Actions - (To add one, press 'Action')


3) Schedule condition type 'from/to':
  - @FROM_TIME and @TO_TIME are of type @TYPE_TIME
  - @FROM_DATE and @TO_DATE are of type @TYPE_DATE
  - XML:
            <schedule>
                <from>
                    <time>@FROM_TIME</time>
                    <date>@FROM_DATE</date>
                </from>
                <to>
                    <time>@TO_TIME</time>
                    <date>@TO_DATE</date>
                </to>
            </schedule>


- Example full program XML:
<d2d>
    <trigger>
        <id>2</id>
        <name>My From/To Program</name>
        <parent>1</parent>
        <if>
            <and/>
            <schedule>
                <from>
                    <time>55500</time>
                    <date>2025/02/13</date>
                </from>
                <to>
                    <time>59405</time>
                    <date>2025/02/13</date>
                </to>
            </schedule>
        </if>
        <then/>
        <else/>
        <comment/>
    </trigger>
</d2d>

- Example Human Readable listing of the full program:
If
        From     3:25:00PM on 2025/02/13
        To       4:30:05PM on 2025/02/13

Then
   - No Actions - (To add one, press 'Action')

Else
   - No Actions - (To add one, press 'Action')

Node Property Condition Definition: A Node Property Condition is a type of condition in IoX programs that compares the current value of a specific property of a node with a specified value. The property being checked is defined in the nodedef for that particular node type.

Node Property Condition 'status':

This condition compares the current value of the specified property with a given value.
The comparison is expressed as: property_value OP specified_value

XML structure:
 <status OP="@TYPE_COMPARE_OP" NODE="@TYPE_NODEADDR" ID="@TYPE_PROPERTY_ID">
    <val UOM="@TYPE_UOM" PREC="@TYPE_PREC">@TYPE_FIXED_POINT_INTEGER</val>
 </status>

Where:

- OP: One of the six comparison operators (@TYPE_COMPARE_OP)
- NODE: The address of the node being queried (@TYPE_NODEADDR)
- ID: The property ID of the property as defined in the nodedef (@TYPE_PROPERTY_ID)
- UOM: The unit of measure for the value (@TYPE_UOM)
- PREC: The precision of the integer specified in the content (@TYPE_PREC)
- content: The fixed point integer represenation of the value (@TYPE_FIXED_POINT_INTEGER)

<examples>
a) Check if a thermostat's temperature is above 75Â°F:
 <status OP="GT" NODE="n001_thermostat" ID="ST">i
    <val UOM="17" PREC="0">75</val>
 </status>

b) Check if an electricity price is less than or equal to $0.10/kWh:
 <status OP="LE" NODE="n003_oadr3ven" ID="ST">
    <val UOM="103" PREC="4">1000</val>
 </status>

c) Check if an electricity price is less than or equal to $1.75/kWh:
 <status OP="LE" NODE="n003_oadr3ven" ID="ST">
    <val UOM="103" PREC="2">175</val>
 </status>
</examples>

Important Notes:

NODE must match the <address> for the node that's defined in <available_nodes>. Do NOT use example addresses.
The property ID (ID attribute) must match a property defined in the nodedef for the specified node.
The UOM and PREC values should be consistent with the property's definition in the nodedef.
Multiple Node Property Conditions can be combined using <and> and <or> tags to create more complex conditions.


- Example XML of full program:
<d2d>
    <trigger>
        <id>2</id>
        <name>Status</name>
        <parent>1</parent>
        <if>
            <and/>
            <status OP="GT" NODE="@TYPE_NODE_ADDR" ID="ST">
                <val UOM="51" PREC="0">50</val>
            </status>
        </if>
        <then>
        </then>
        <else>
        </else>
        <comment/>
    </trigger>
</d2d>

- Example human readable listing of the full program:
Status - [ID 0002][Parent 0001]

If
        '0D.51.25.1' Status > 50%

Then
   - No Actions - (To add one, press 'Action')

Else
   - No Actions - (To add one, press 'Action')



== Actions ==
- Actions are lines that only appear in the 'Then' or 'Else' section of the program
- There are many different types of actions, each described separately below

-- Action Type: Command : <cmd> tag
- This is an instance of using one of the commands in the accepts section of a nodedef
- The <p> tag indicates a parameter
- Commands may have zero or more parameters
- One parameter may have a blank ID (empty string)
- The parameter IDs are unique as scoped to the command
- When creating a Command action, you cannot deviate from what is defined in the nodedef for the node
- You cannot deviate at all from the XML format defined below

XML structure:
   <cmd NODE="@TYPE_NODEADDR" ID="@TYPE_CMD_ID">
     <p ID="@TYPE_CMD_PARM_ID">
       <val UOM="@TYPE_UOM" PREC="@TYPE_PREC">@TYPE_FIXED_POINT_INTEGER</val>
     </p>
     <p ID="@TYPE_CMD_PARM_ID">
       <val UOM="@TYPE_UOM" PREC="@TYPE_PREC">@TYPE_FIXED_POINT_INTEGER</val>
     </p>
   </cmd>

Where:
In the command tag <cmd>
- NODE: The address of the node being queried (@TYPE_NODEADDR)
- ID: The ID of the accepts command to be run (@TYPE_CMD_ID)

In the command parameter <p> tag:
- ID: The ID of the accepts command to be run (@TYPE_CMD_ID)

In the value <val> tag:
- Represents the components of a @TYPE_IOX_VALUE using XML
- UOM: The unit of measure for the value (@TYPE_UOM)
- PREC: The precision of the integer specified in the content (@TYPE_PREC)
- content: The fixed point integer represenation of the value (@TYPE_FIXED_POINT_INTEGER)

<example>
<!-- Send "DON 72%, RR=0.8 seconds to node a node with address 'D 51 24 1'. Address is defined in @TYPE_NODEADDR" -->
<cmd NODE="D 51 24 1" ID="DON">
  <p ID="">
    <val UOM="51" PREC="0">72</val> <!-- On to 72% -->
  </p>
  <p ID="RR">
    <val UOM="25" PREC="1">8</val>  <!-- Ramp Rate 0.8 seconds -->
  </p>
</cmd>
</example>

Common Problems:
- Often mistakes are made where a decimal point is used in the @TYPE_FIXED_POINT_INTEGER:
     <val UOM="103" PREC="2">0.4000</val> <!-- WRONG 0.4000 is not an integer! -->
  corrected:
     <val UOM="103" PREC="2">4000</val> <!-- Correct, now represents is 40.00 dollars  -->
- examples:
   1. $0.40 which is 40 cents is represented as:
        <val UOM="103" PREC="2">40</val>
   2. $0.60 which is 60 cents is represented as:
        <val UOM="103" PREC="2">60</val>
   3. $1.00 which is 1 dollar is represented as:
        <val UOM="103" PREC="2">100</val>

-- Action Type: Comment : <comment> tag
- Simply a comment in the 'Then' or 'Else' section of the program with newlines and spacing preserved
- Text begins immediately after the opening <comment> tag; avoid starting with a newline unless an initial blank line is intended

<example>
<!-- Comment without leading newline -->
<comment>Hello!
This is a comment</comment>
</example>

Displays:
        // Hello!
        // This is a comment in Then or Else

-- Action Type: Wait : <wait> tag
- Pauses execution of the program for the specified amount of time
- `<hours>`, `<minutes>`, `<seconds>` are non-negative integers
- The <random/> tag causes it to wait a random time between 1 second and the specified amount of time (must be = 1 second)

<example>
<!-- Wait 1 hour 1 minute and 1 second -->
<wait>
  <hours>1</hours>
  <minutes>1</minutes>
  <seconds>1</seconds>
</wait>

<!-- Wait randomly between 1 second and 1 hour -->
<wait>
  <hours>1</hours>
  <minutes>0</minutes>
  <seconds>0</seconds>
  <random/>
</wait>
</example>

-- Action Type: Notify : <notify> tag
- Sends a pre-configured notification to a pre-configured recipient

<example>
<!-- Generic template -->
<notify CONTENT="@TYPE_CONTENT">@TYPE_RECIPIENT</notify>

<!-- Send notification 1 to recipient 5 -->
<notify CONTENT="1">5</notify>
</example>
== Putting it all together into a complete XML of IoX Programs ===
- All IoX programs have a numeric ID
- A folder has the same structure as program except it has a <folder /> tag appearing just before the <if> tag
- The members of a folder are not embedded in the folder XML, everything is flat.  The membership is specified by the 'parent' tag.
- All programs have a parent folder identified by the parent folders numeric ID
- All folders may have a parent folder identified by the parent folders numeric ID, or 0 indicating it doesn't have a parent.
- Every program is stored in an individual file.  The filename for a program is the program ID as a capitalized 4 digit hexadecimal number as the name with .PGM as the extension.  It goes in the D2D directory.
e.g.   For program ID = 5 the filename is D2D/0005.PGM
e.g.   For program ID = 10 the filename is D2D/000A.PGM

- Human readable listing:
My Example Program - [ID 0004][Parent 0001]

If
        Time is  8:40:00AM

Then
        Set '0D.51.25.1' On 70%

Else
        Send Notification to 'Chris' content 'Test2'

- XML for the program
<d2d>
    <trigger>
        <id>@TYPE_PROGRAM_ID</id>
        <name>New Program</name>
        <parent>@TYPE_PROGRAM_ID</parent>
        <if>
            <and/>
            <schedule>
                <at>
                    <time>31200</time>
                </at>
            </schedule>
        </if>
        <then>
            <cmd NODE="@TYPE_NODEADDR" ID="DON">
                <p ID="">
                    <val UOM="51" PREC="0">70</val>
                </p>
            </cmd>
        </then>
        <else>
            <notify CONTENT="2">1</notify>
        </else>
        <comment/>
    </trigger>
</d2d>

- XML for the parent folder
<d2d>
    <trigger>
        <id>@TYPE_PROGRAM_ID</id>
        <name>My Programs</name>
        <parent>0</parent>
        <folder/>
        <if/>
        <then/>
        <else/>
        <comment/>
    </trigger>
</d2d>

- Multiple programs and/or folders may be specified in the same XML by surrounding it with the <triggers> tag
- Here is a raw example of some XML with a folder containing a few programs
<example>
<?xml version="1.0" ?><triggers><d2d><trigger><id>4</id><name></name><parent>1</parent><if><and /><schedule><at><time>31200</time></at></schedule></if><then><cmd id="DON" node="D 51 25 1"><p id=""><val uom="51" prec="0">70</val></p></cmd></then><else><notify content="2">1</notify></else><comment></comment></trigger></d2d><d2d><trigger><id>3</id><name>New Program</name><parent>1</parent><if></if><then><cmd id="DON" node="D 51 25 1"><p id=""><val uom="51" prec="0">19</val></p></cmd><comment>Hello!&#x0A;This is a comment</comment><wait><hours>1</hours><seconds>1</seconds></wait><wait><hours>1</hours><minutes>1</minutes><seconds>1</seconds></wait><wait><hours>1</hours><minutes>1</minutes><seconds>1</seconds><random /></wait></then><else></else><comment></comment></trigger></d2d><d2d><trigger><id>2</id><name>New Program</name><parent>1</parent><if><and /><paren><and /><status id="ST" node="D 51 25 1" op="IS"><val uom="51" prec="0">0</val></status><or /><paren><and /><status id="ST" node="D 51 25 1" op="IS"><val uom="51" prec="0">0</val></status><and /><status id="ST" node="D 51 25 1" op="IS"><val uom="51" prec="0">0</val></status><or /><paren><and /><status id="ST" node="D 51 25 1" op="IS"><val uom="51" prec="0">0</val></status></paren></paren><and /><paren><and /><status id="ST" node="60 9 B3 65" op="IS"><val uom="2" prec="0">0</val></status><and /><status id="ST" node="60 9 B3 65" op="IS"><val uom="2" prec="0">0</val></status></paren></paren></if><then></then><else></else><comment></comment></trigger></d2d><d2d><trigger><id>1</id><name>My Programs</name><parent>0</parent><folder /><if></if><then></then><else></else><comment></comment></trigger></d2d></triggers>
</example>
The following are very important rules that must be followed at all times:
- When you are requested to write a program it will always be one or more IoX programs unless otherwise stated and must strictly abide by ONLY the defined XML tags IoX programs.  No invention or assumption of XML tags or attributes is ever done for IoX programs.
- When writing programs always specify a delimiter of 'ProgramFileStart' followed by the filename follwed by the XML follwed by 'ProgramFileEnd'
- When requested to write a program, produce the actual XML only, no descriptions or explanations unless asked for.

</iox_programs>